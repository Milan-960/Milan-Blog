<?xml version="1.0" ?>
  <rss
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:atom="http://www.w3.org/2005/Atom"
    version="2.0"
  >
    <channel>
        <title><![CDATA[Milan]]></title>
        <link>https://blog.milansachani.dev/</link>
        <description>
          <![CDATA[I like to share my knowledge ‚ù§Ô∏è]]>
        </description>
        <language>en</language>
        <lastBuildDate>2023-02-07</lastBuildDate>
        <item>
    <title><![CDATA[What is Redux?]]></title>
    <link>https://blog.milansachani.dev//What-is-redux</link>
    <pubDate>2023-02-07</pubDate>
    <guid isPermaLink="false">https://blog.milansachani.dev//What-is-redux</guid>
    <description>
    <![CDATA[Simply Explained! what is Redux]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="what-is-redux-simply-explained" class="heading"><a href="https://redux.js.org/introduction/getting-started" target="_blank" rel="noopener noreferer">What is Redux? Simply Explained!</a></h2>
<h4 id="now-lets-dive-in-_">Now let's dive in ^_^</h4>
<h4 id="before-going-into-what-is-redux-lets-see-why-we-needed-redux-in-the-first-place">before going into what is Redux? Let's see why we needed Redux in the first place.</h4>
<h2 id="the-problem" class="heading"><a href="What-is-redux#the-problem">The Problem</a></h2>
<p align="center">
  <img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qh1c1vqoz1hna7onduta.png" />
</p>
<p>
Let‚Äôs say as a root component you have app.js file in your project, and in the component tree, the first layer contains 3 components and in the 2nd layer there are two child component of 2nd component.
</p>
<p align="center">
<img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nbhcaewzxjo4fzd8caq.png" />
</p>
<p>Here, you have fetched the data from an API and you save it in the state of 2nd component. You can use this data state in child components by directly passing them downwards.</p>
<p>
<p>Now the problem occurs when the neighbor component which is 3 want to access that data state.</p>
<blockquote>
<p>So the problem is <font color="#0070f3">when multiple components that need to share and use the same state </font></p>
</blockquote>
<p>This can be solved by <font color="#0070f3">‚Äúlifting up‚Äù</font> the state to the parent component. So you can lift state from 2nd component to the app.js file. and then you can use this state in the 3rd component.</p>
<p>But that does not help always because in large application there are many states needed to be used in many different components, so it is not the best practice.</p>
<p>One way to solve this problem is <font color="#0070f3">to take state outside of the component tree and set it as centralized.</font> So that any component in the tree can access and update the state without worrying about it‚Äôs hierarchy in the tree.</p>
<p>This is the basic idea behind Redux: <font color="#0070f3">a single centralized place to contain the global state in your application, and specific patterns to follow when updating that state.</font></p>
<blockquote>
<p>You can use redux to store the state and you can use it to any component without worrying about the hierarchy.</p>
</blockquote>
</p>
<h3 id="now-lets-see-how-application-works-normally-in-react-without-redux">Now let‚Äôs see how application works normally in react without redux.</h3>
<p align="center">
<img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8excbab1hwjt5a24mrm.png" />
</p>
<p>Consider this action as a trigger to update the state and when state gets changed then view updates the UI with new state.
<p>For simple counter application, when we increment counter value then increment event goes to state and state updates new value then, view re-renders ui based on the updated state.</p>
<p>So let‚Äôs see what happens when you use Redux.</p>
</p>
<p align="center">
<img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xkirro5er7ctdczdly5l.png" />
</p>
<p>
In the redux there is a function called reducer.
This reducer function takes two arguments, first is the state itself, and second is the action object.
<p>Action object can have a type of action like increment and any data that wants to modify the state.</p>
<p>Now based on previous state value and action type redux calculates new value for state and updates it.
These all things happens inside the redux store, you can say it as any centralized database for state management.</p>
<p>Then when view get new state value it re-renders the UI.</p>
<p>Let me show you another example of how redux works!</p>
</p>
<p align="center">
<img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4l0u5umm0ex29hhnsrq.gif" />
</p>
<p>As you can see here this is a simple gif which explains how redux works, you can find it on the official <a href="https://redux.js.org/tutorials/essentials/part-1-overview-concepts" target="_blank" rel="noopener noreferer">redux documentation</a>.</p>
<p>
<p>Now using this UI you can either deposit or withdraw money.</p>
<p>when we click the deposit button, click event goes to event handler, based on event, event handler dispatches an action with the type as deposit and any details needed in the payload property.</p>
<p>This reducer accepts two things, state and the action object. Previous value of state is 0$ and action is for deposit, so the reducer will update the new state by depositing 10$ amount.</p>
<p>you can see in the UI balance, it changed from 0 to 10$.</p>
</p>
<h2 id="redux-by-definition" class="heading"><a href="What-is-redux#redux-by-definition">Redux by definition</a></h2>
<h3 id="it-is-a-predictable-state-container-for-js-apps">It is a Predictable State Container for JS Apps.</h3>
<h4 id="predictable-because-it-helps-you-write-applications-that-behave-consistently-and-can-run-in-different-environments-client-server-and-native"><font color="#0070f3">Predictable</font> because it helps you write applications that behave consistently, and can run in different environments (client, server, and native).</h4>
<h4 id="centralized-because-of-this-feature-we-dont-need-to-lift-state-to-parent-components-and-we-can-use-state-from-any-component-we-want-due-to-this-centralized-behavior"><font color="#0070f3">Centralized</font> because of this feature, we don't need to lift state to parent components and we can use state from any component we want due to this centralized behavior.</h4>
<h4 id="debuggable-there-is-an-extension-called-redux-devtools-which-is-an-excellent-tool-to-debug-redux-applications-using-this-tool-you-can-see-when-where-why-and-how-your-applications-state-changed"><font color="#0070f3">Debuggable</font> There is an extension called Redux DevTools which is an excellent tool to debug Redux applications. Using this tool you can see when, where, why, and how your application's state changed.</h4>
<h4 id="flexible-because-it-works-with-any-ui-layer-and-has-a-large-ecosystem-of-addons"><font color="#0070f3">Flexible</font> because it works with any UI layer, and has a large ecosystem of addons.</h4>
<p>If you're confused about anything related to this topic feel free to ask me üòâ!</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[Blogs are coming soon on this site!! ‚ù§Ô∏è]]></title>
    <link>https://blog.milansachani.dev//blogs</link>
    <pubDate>2022-06-25</pubDate>
    <guid isPermaLink="false">https://blog.milansachani.dev//blogs</guid>
    <description>
    <![CDATA[Amazing blogs are coming soon!]]>
    </description>
    <content:encoded>
      <![CDATA[]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[Integer to Roman challenge]]></title>
    <link>https://blog.milansachani.dev//Roman-to-Integer</link>
    <pubDate>2022-06-25</pubDate>
    <guid isPermaLink="false">https://blog.milansachani.dev//Roman-to-Integer</guid>
    <description>
    <![CDATA[Integer to Roman (Leet Code challenge)]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="1-integer-to-roman--difficulty--easy-" class="heading"><a href="https://leetcode.com/problems/integer-to-roman" target="_blank" rel="noopener noreferer">1. Integer to Roman</a> <strong><em>| Difficulty | Easy |</em></strong></h2>
<h2 id="problem" class="heading">Problem:</h2>
<p>Problem:
Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.</p>
<pre><code class="code-highlight"><span class="code-line">Symbol       Value    
</span><span class="code-line">I             1
</span><span class="code-line">V             5
</span><span class="code-line">X             10
</span><span class="code-line">L             50
</span><span class="code-line">C             100
</span><span class="code-line">D             500
</span><span class="code-line">M             1000
</span></code></pre>
<p>For example, two is written as <code>II</code> in Roman numeral, just two one's added together. Twelve is written as, <code>XII</code>, which is simply <code>X</code> + <code>II</code>. The number twenty seven is written as <code>XXVII</code>, which is <code>XX</code> + <code>V</code> + <code>II</code>.</p>
<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p>
<ul>
<li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.</li>
<li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.</li>
<li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li>
</ul>
<p>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</p>
<h2 id="examples" class="heading">Examples</h2>
<p><strong>Example 1:</strong></p>
<pre><code class="code-highlight"><span class="code-line">Input: "III"
</span><span class="code-line">Output: 3
</span></code></pre>
<p><strong>Example 2:</strong></p>
<pre><code class="code-highlight"><span class="code-line">Input: "IV"
</span><span class="code-line">Output: 4
</span></code></pre>
<p><strong>Example 3:</strong></p>
<pre><code class="code-highlight"><span class="code-line">Input: "IX"
</span><span class="code-line">Output: 9
</span></code></pre>
<p><strong>Example 4:</strong></p>
<pre><code class="code-highlight"><span class="code-line">Input: "LVIII"
</span><span class="code-line">Output: 58
</span><span class="code-line">Explanation: C = 100, L = 50, XXX = 30 and III = 3.
</span></code></pre>
<p><strong>Example 5:</strong></p>
<pre><code class="code-highlight"><span class="code-line">Input: "MCMXCIV"
</span><span class="code-line">Output: 1994
</span><span class="code-line">Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
</span></code></pre>
<h2 id="solution" class="heading">Solution:</h2>
<p>Normally we just add up the digits, except when the digit is greater than its left (e.g. IV). In that case we need to fallback and remove the last digit then combine the two as new digit. That is why we subtract the last digit twice.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token doc-comment comment">/**
</span></span><span class="code-line"><span class="token doc-comment comment"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
</span></span><span class="code-line"><span class="token doc-comment comment"> * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
</span></span><span class="code-line"><span class="token doc-comment comment"> */</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> roman <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-property property">'I'</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string-property property">'V'</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string-property property">'X'</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string-property property">'L'</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string-property property">'C'</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string-property property">'D'</span><span class="token operator">:</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string-property property">'M'</span><span class="token operator">:</span><span class="token number">1000</span><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">var</span> <span class="token function-variable function">romanToInt</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">S</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token constant">S</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">~</span>i<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword">let</span> num <span class="token operator">=</span> roman<span class="token punctuation">[</span><span class="token constant">S</span><span class="token punctuation">.</span><span class="token method function property-access">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> num <span class="token operator">&#x3C;</span> ans<span class="token punctuation">)</span> ans <span class="token operator">-=</span> num
</span><span class="code-line">        <span class="token keyword control-flow">else</span> ans <span class="token operator">+=</span> num
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> ans
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// Ans:</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// Your input</span>
</span><span class="code-line"><span class="token comment">// [3,2,2,3]</span>
</span><span class="code-line"><span class="token comment">// 3</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// | Your answer | Expected answer |</span>
</span><span class="code-line"><span class="token comment">// | [2,2]       | [2,2]           |</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[Two Sum challenge]]></title>
    <link>https://blog.milansachani.dev//twosum</link>
    <pubDate>2022-06-25</pubDate>
    <guid isPermaLink="false">https://blog.milansachani.dev//twosum</guid>
    <description>
    <![CDATA[Two Sum (Leet Code challenge)]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="1-two-sum--difficulty--easy-" class="heading"><a href="https://leetcode.com/problems/two-sum/description/" target="_blank" rel="noopener noreferer">1. Two Sum</a> <strong><em>| Difficulty | Easy |</em></strong></h2>
<h2 id="problem" class="heading">Problem:</h2>
<p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have <strong>exactly</strong> one solution, and you may not use the <em>same</em> element twice.</p>
<h2 id="example" class="heading">Example:</h2>
<p><strong>Example:</strong></p>
<pre><code class="code-highlight"><span class="code-line">
</span><span class="code-line">Given nums = [2, 7, 11, 15], target = 9,
</span><span class="code-line">Because nums[0] + nums[1] = 2 + 7 = 9,
</span><span class="code-line">return [0, 1].
</span><span class="code-line">
</span></code></pre>
<h2 id="solution" class="heading">Solution:</h2>
<p>Map the numbers to their indices as we iterate, so that we can look them back up in O(1) time complexity.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token doc-comment comment">/**
</span></span><span class="code-line"><span class="token doc-comment comment"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
</span></span><span class="code-line"><span class="token doc-comment comment"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">target</span>
</span></span><span class="code-line"><span class="token doc-comment comment"> * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
</span></span><span class="code-line"><span class="token doc-comment comment"> */</span>
</span><span class="code-line"><span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> indicies <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> nums<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> num <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>indicies<span class="token punctuation">[</span>target <span class="token operator">-</span> num<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span>indicies<span class="token punctuation">[</span>target <span class="token operator">-</span> num<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    indicies<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// Ans:</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// | Your answer | Expected answer |</span>
</span><span class="code-line"><span class="token comment">// | [0,1]       | [0,1]           |</span>
</span></code></pre>]]>
    </content:encoded>
  </item>
    </channel>
  </rss>