<?xml version="1.0" ?>
  <rss
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:atom="http://www.w3.org/2005/Atom"
    version="2.0"
  >
    <channel>
        <title><![CDATA[Milan]]></title>
        <link>https://blog.milansachani.dev/</link>
        <description>
          <![CDATA[I like to share my knowledge ❤️]]>
        </description>
        <language>en</language>
        <lastBuildDate>2022-06-25</lastBuildDate>
        <item>
    <title><![CDATA[Blogs are coming soon on this site!! ❤️]]></title>
    <link>https://blog.milansachani.dev//blogs</link>
    <pubDate>2022-06-25</pubDate>
    <guid isPermaLink="false">https://blog.milansachani.dev//blogs</guid>
    <description>
    <![CDATA[Amazing blogs are coming soon!]]>
    </description>
    <content:encoded>
      <![CDATA[]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[Two Sum challenge]]></title>
    <link>https://blog.milansachani.dev//Roman-to-Integer</link>
    <pubDate>2022-06-25</pubDate>
    <guid isPermaLink="false">https://blog.milansachani.dev//Roman-to-Integer</guid>
    <description>
    <![CDATA[Two Sum (Leet Code challenge)]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="1-two-sum--difficulty--easy-" class="heading"><a href="https://leetcode.com/problems/two-sum/description/" target="_blank" rel="noopener noreferer">1. Two Sum</a> <strong><em>| Difficulty | Easy |</em></strong></h2>
<h3 id="problem">Problem:</h3>
<p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have <strong>exactly</strong> one solution, and you may not use the <em>same</em> element twice.</p>
<p><strong>Example:</strong></p>
<pre><code class="code-highlight"><span class="code-line">
</span><span class="code-line">Given nums = [2, 7, 11, 15], target = 9,
</span><span class="code-line">Because nums[0] + nums[1] = 2 + 7 = 9,
</span><span class="code-line">return [0, 1].
</span><span class="code-line">
</span></code></pre>
<h2 id="solution" class="heading">Solution:</h2>
<p>Map the numbers to their indices as we iterate, so that we can look them back up in O(1) time complexity.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token doc-comment comment">/**
</span></span><span class="code-line"><span class="token doc-comment comment"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
</span></span><span class="code-line"><span class="token doc-comment comment"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">target</span>
</span></span><span class="code-line"><span class="token doc-comment comment"> * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
</span></span><span class="code-line"><span class="token doc-comment comment"> */</span>
</span><span class="code-line"><span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> indicies <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> nums<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> num <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>indicies<span class="token punctuation">[</span>target <span class="token operator">-</span> num<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span>indicies<span class="token punctuation">[</span>target <span class="token operator">-</span> num<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    indicies<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// Ans:</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// | Your answer | Expected answer |</span>
</span><span class="code-line"><span class="token comment">// | [0,1]       | [0,1]           |</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[Two Sum challenge]]></title>
    <link>https://blog.milansachani.dev//twosum</link>
    <pubDate>2022-06-25</pubDate>
    <guid isPermaLink="false">https://blog.milansachani.dev//twosum</guid>
    <description>
    <![CDATA[Two Sum (Leet Code challenge)]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="1-two-sum--difficulty--easy-" class="heading"><a href="https://leetcode.com/problems/two-sum/description/" target="_blank" rel="noopener noreferer">1. Two Sum</a> <strong><em>| Difficulty | Easy |</em></strong></h2>
<h3 id="problem">Problem:</h3>
<p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have <strong>exactly</strong> one solution, and you may not use the <em>same</em> element twice.</p>
<p><strong>Example:</strong></p>
<pre><code class="code-highlight"><span class="code-line">
</span><span class="code-line">Given nums = [2, 7, 11, 15], target = 9,
</span><span class="code-line">Because nums[0] + nums[1] = 2 + 7 = 9,
</span><span class="code-line">return [0, 1].
</span><span class="code-line">
</span></code></pre>
<h2 id="solution" class="heading">Solution:</h2>
<p>Map the numbers to their indices as we iterate, so that we can look them back up in O(1) time complexity.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token doc-comment comment">/**
</span></span><span class="code-line"><span class="token doc-comment comment"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
</span></span><span class="code-line"><span class="token doc-comment comment"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">target</span>
</span></span><span class="code-line"><span class="token doc-comment comment"> * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
</span></span><span class="code-line"><span class="token doc-comment comment"> */</span>
</span><span class="code-line"><span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> indicies <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> nums<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> num <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>indicies<span class="token punctuation">[</span>target <span class="token operator">-</span> num<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span>indicies<span class="token punctuation">[</span>target <span class="token operator">-</span> num<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    indicies<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// Ans:</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// | Your answer | Expected answer |</span>
</span><span class="code-line"><span class="token comment">// | [0,1]       | [0,1]           |</span>
</span></code></pre>]]>
    </content:encoded>
  </item>
    </channel>
  </rss>